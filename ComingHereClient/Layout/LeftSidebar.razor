@using ComingHereShared.Constants
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (isGala)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-event">
                    <span class="bi bi-calendar-plus-fill-nav-menu" aria-hidden="true"></span> Создать событие
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="event-categories">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Управление категориями событий
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="organizer-categories">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Управление категориями организаторов
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="participant-categories">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Управление категориями участников
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-organizer">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Создать организатора
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="organizers">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Организаторы
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-participant">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Создать участника
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="participants">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Участники
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="allevents">
                <span class="bi bi-list-ul" aria-hidden="true"></span> Все события
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <a class="nav-link" href="" @onclick="GoToMyCabinet">
                <span class="bi bi-star-half" aria-hidden="true"></span> Мой кабинет
            </a>
        </div>
    </nav>
</div>

@implements IDisposable

@code {
    private bool collapseNavMenu = true;
    private bool isGala;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        await SetRoleAsync();
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        await SetRoleAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetRoleAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isGala = authState.User.IsInRole(Roles.Gala);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task GoToMyCabinet()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst("sub")?.Value ?? user.FindFirst("id")?.Value;

            if (!string.IsNullOrWhiteSpace(userId))
            {
                Navigation.NavigateTo($"/user/{userId}");
            }
        }
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}