@using ComingHereClient.Services
@using ComingHereShared.Constants
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject LocalizationService Loc

<div class="ch-nav-wrapper" @onclick="ToggleNavMenu">
    <nav class="ch-nav">
        <div class="ch-nav-item">
            <NavLink class="ch-nav-link" href="" Match="NavLinkMatch.All">
                @Loc["LeftPanel_Button_Home"]
            </NavLink>
        </div>
        @if (isGala)
        {
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="create-event">
                    @Loc["LeftPanel_Button_CreateEvent"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="event-categories">
                    @Loc["LeftPanel_Button_EventCategory"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="organizer-categories">
                    @Loc["LeftPanel_Button_OrganizerCategories"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="participant-categories">
                    @Loc["LeftPanel_Button_AttendeeCategories"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="create-organizer">
                    @Loc["LeftPanel_Button_CreateOrganizer"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="organizers">
                    @Loc["LeftPanel_Button_Organizers"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="create-participant">
                    @Loc["LeftPanel_Button_CreateAttendees"]
                </NavLink>
            </div>
            <div class="ch-nav-item">
                <NavLink class="ch-nav-link" href="participants">
                    @Loc["LeftPanel_Button_Attendees"]
                </NavLink>
            </div>
        }
        <div class="ch-nav-item">
            <NavLink class="ch-nav-link" href="events/allevents">
                @Loc["LeftPanel_Button_AllEvents"]
            </NavLink>
        </div>
        <div class="ch-nav-item">
            <a class="ch-nav-link @(IsMyCabinetActive ? "active" : "")" href="#" @onclick="GoToMyCabinet">
                @Loc["LeftPanel_Button_MyOffice"]
            </a>
        </div>
    </nav>
</div>

@implements IDisposable

@code {
    private bool collapseNavMenu = true;
    private bool isGala;
    private bool IsMyCabinetActive;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        Navigation.LocationChanged += OnLocationChanged;

        await SetRoleAsync();
        UpdateIsMyCabinetActive(Navigation.Uri);
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        await SetRoleAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetRoleAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isGala = authState.User.IsInRole(Roles.Gala);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateIsMyCabinetActive(e.Location);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateIsMyCabinetActive(string uri)
    {
        IsMyCabinetActive = uri.Contains("/user/");
    }

    private async Task GoToMyCabinet()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst("sub")?.Value ?? user.FindFirst("id")?.Value;

            if (!string.IsNullOrWhiteSpace(userId))
            {
                Navigation.NavigateTo($"/user/{userId}");
            }
        }
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }
}