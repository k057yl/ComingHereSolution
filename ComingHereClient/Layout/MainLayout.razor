@using ComingHereClient.Services
@using ComingHereShared.Constants
@using ComingHereShared.DTO
@inherits LayoutComponentBase
@inject HttpClient Http
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthService AuthService
@inject IJSRuntime JS

<div class="layout">
    <div class="top-bar">
        <div class="top-left">
            <div class="logo-img"></div>
        </div>

        <div class="top-center">
            <!-- пока пусто -->
        </div>

        <div class="top-right">
            <div class="greeting">
                @if (isAuthenticated)
                {
                    <span>Привет, @userEmail!</span>
                }
                else
                {
                    <span>Вы не авторизованы</span>
                }
            </div>

            <div class="button-row">
                <button class="custom-btn" @onclick="ToggleTheme">Тема</button>

                <div class="language-dropdown">
                    <button class="custom-btn" @onclick="ToggleLangMenu">Язык</button>
                    @if (langMenuVisible)
                    {
                        <ul class="lang-menu">
                            <li><a href="#" @onclick='() => ChangeLanguage("en")'>English</a></li>
                            <li><a href="#" @onclick='() => ChangeLanguage("uk")'>Українська</a></li>
                        </ul>
                    }
                </div>

                @if (isAuthenticated)
                {
                    <button class="custom-btn" @onclick="Logout">Выйти</button>
                }
                else
                {
                    <button class="custom-btn" @onclick='() => Nav.NavigateTo(ClientRoutes.Login)'>Войти</button>
                    <button class="custom-btn" @onclick='() => Nav.NavigateTo(ClientRoutes.Register)'>Регистрация</button>
                }
            </div>
        </div>
    </div>

    <div class="main-area">
        <div class="sidebar-left">
            <LeftSidebar />
        </div>

        <main class="main-content">
            <article class="main-content-block">
                @Body
            </article>
        </main>

        <div class="sidebar-right">
            <RightSidebar />
        </div>
    </div>
</div>

@code {
    private bool isAuthenticated = false;
    private string? userEmail;
    private bool langMenuVisible = false;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        await LoadUserInfoAsync();
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        await LoadUserInfoAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUserInfoAsync()
    {
        try
        {
            var user = await Http.GetFromJsonAsync<UserInfoDto>("api/account/me");
            if (user != null && !string.IsNullOrEmpty(user.Email))
            {
                userEmail = user.Email;
                isAuthenticated = true;
            }
            else
            {
                isAuthenticated = false;
                userEmail = null;
            }
        }
        catch
        {
            isAuthenticated = false;
            userEmail = null;
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();
    }

    private async Task ChangeLanguage(string culture)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "blazorCulture", culture);
        await JS.InvokeVoidAsync("location.reload");
    }

    private async Task ToggleTheme()
    {
        await JS.InvokeVoidAsync("toggleTheme");
    }

    private void ToggleLangMenu()
    {
        langMenuVisible = !langMenuVisible;
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}