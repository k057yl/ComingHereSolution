@using ComingHereClient.Services
@using ComingHereClient.Provider
@using ComingHereShared.Constants
@using ComingHereShared.DTO
@using System.Security.Claims
@inherits LayoutComponentBase
@inject HttpClient Http
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject AuthService AuthService
@inject IJSRuntime JS
@inject LocalizationService Loc

<div class="layout">
    <div class="top-bar">
        <div class="top-left">
            <div class="logo-img"></div>
        </div>

        <div class="top-center">
            <!-- пока пусто -->
        </div>

        <div class="top-right">
            <div class="greeting">
                @if (isAuthenticated)
                {
                    <span>Привет, @userEmail!</span>
                }
                else
                {
                    <span>Вы не авторизованы</span>
                }
            </div>

            <div class="button-row">
                <button class="custom-btn" @onclick="ToggleTheme">Тема</button>

                <div class="language-dropdown" id="langDropdown">
                    <button class="custom-btn" @onclick="ToggleLangMenu">Язык</button>
                    @if (langMenuVisible)
                    {
                        <ul class="lang-menu">
                            <li @onclick='() => ChangeLanguage("en")'>English</li>
                            <li @onclick='() => ChangeLanguage("uk")'>Українська</li>
                        </ul>
                    }
                </div>

                @if (isAuthenticated)
                {
                    <button class="custom-btn" @onclick="Logout">Выйти</button>
                }
                else
                {
                    <button class="custom-btn" @onclick='() => Nav.NavigateTo(ClientRoutes.Login)'>Войти</button>
                    <button class="custom-btn" @onclick='() => Nav.NavigateTo(ClientRoutes.Register)'>Регистрация</button>
                }
            </div>
        </div>
    </div>

    <div class="main-area">
        <div class="ch-sidebar-left">
            <LeftSidebar />
        </div>

        <main class="main-content">
            <article class="main-content-block">
                @Body
            </article>
        </main>

        <div class="ch-sidebar-right">
            <RightSidebar />
        </div>
    </div>
</div>

@code {
    private bool isAuthenticated = false;
    private string? userEmail;
    private bool langMenuVisible = false;
    private DotNetObjectReference<MainLayout>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        await LoadUserInfoAsync();
    }

    private void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        _ = InvokeAsync(async () =>
        {
            await LoadUserInfoAsync();
            StateHasChanged();
        });
    }

    private async Task LoadUserInfoAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            isAuthenticated = false;
            userEmail = null;
            return;
        }

        try
        {
            var user = await Http.GetFromJsonAsync<UserInfoDto>("api/account/me");
            if (user != null && !string.IsNullOrEmpty(user.Email))
            {
                userEmail = user.Email;
                isAuthenticated = true;
            }
            else
            {
                isAuthenticated = false;
                userEmail = null;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            // При 401 — сбрасываем состояние авторизации
            isAuthenticated = false;
            userEmail = null;

            await AuthService.Logout();
        }
        catch
        {
            isAuthenticated = false;
            userEmail = null;
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();

        // Сообщаем CustomAuthStateProvider, что пользователь вышел
        await CustomAuthStateProvider.MarkUserAsLoggedOut();

        isAuthenticated = false;
        userEmail = null;

        Nav.NavigateTo(ClientRoutes.Login, forceLoad: true);

        StateHasChanged();
    }

    private async Task ChangeLanguage(string culture)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "blazorCulture", culture);
        await JS.InvokeVoidAsync("location.reload");
    }

    private async Task ToggleTheme()
    {
        await JS.InvokeVoidAsync("toggleTheme");
    }

    private void ToggleLangMenu()
    {
        langMenuVisible = !langMenuVisible;

        if (langMenuVisible)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            JS.InvokeVoidAsync("registerOutsideClickHandler", "langDropdown", dotNetRef);
        }
    }

    [JSInvokable]
    public void CloseLangMenu()
    {
        if (langMenuVisible)
        {
            langMenuVisible = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
        dotNetRef?.Dispose();
    }
}