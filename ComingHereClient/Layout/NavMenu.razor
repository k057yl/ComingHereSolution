@using ComingHereClient.Services
@using ComingHereShared.Constants
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ComingHereClient</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="d-flex align-items-center">
            <div class="dropdown me-3">
                <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    Язык
                </button>
                <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="languageDropdown">
                    <li><a class="dropdown-item" href="#" @onclick='() => ChangeLanguage("en")'>English</a></li>
                    <li><a class="dropdown-item" href="#" @onclick='() => ChangeLanguage("uk")'>Українська</a></li>
                </ul>
            </div>

            @if (isAuthenticated)
            {
                <button class="btn btn-outline-light btn-sm" @onclick="Logout">Выйти</button>
            }
            else
            {
                <button class="btn btn-outline-light btn-sm me-2" @onclick='() => Nav.NavigateTo(ClientRoutes.Login)'>Войти</button>
                <button class="btn btn-outline-light btn-sm" @onclick='() => Nav.NavigateTo(ClientRoutes.Register)'>Регистрация</button>
            }
        </div>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (isGala)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-event">
                    <span class="bi bi-calendar-plus-fill-nav-menu" aria-hidden="true"></span> Создать событие
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="event-categories">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Управление категориями событий
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="organizer-categories">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Управление категориями организаторов
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="participant-categories">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Управление категориями участников
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-organizer">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Создать организатора
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="organizers">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Организаторы
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-participant">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Создать участника
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="participants">
                    <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Участники
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="allevents">
                <span class="bi bi-list-ul" aria-hidden="true"></span> Все события
            </NavLink>
        </div>
    </nav>
</div>

@implements IDisposable

@code {
    private bool collapseNavMenu = true;
    private bool isAuthenticated;
    private string? userEmail;
    private bool isGala;
    [Parameter]
    public int EventId { get; set; }

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userEmail = user.Identity?.Name;

        isGala = user.IsInRole(Roles.Gala);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userEmail = user.Identity?.Name;

        isGala = user.IsInRole(Roles.Gala);

        await InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        isAuthenticated = false;
        userEmail = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    private async Task SetLanguage(string culture)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "blazorCulture", culture);
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private async Task ChangeLanguage(string culture)
    {
        SetLanguage(culture);
        await JS.InvokeVoidAsync("location.reload");
    }
}