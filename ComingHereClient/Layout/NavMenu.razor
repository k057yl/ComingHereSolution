@using ComingHereClient.Services
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ComingHereClient</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="d-flex align-items-center">
            <button class="btn btn-outline-light btn-sm me-2" @onclick='() => SetLanguage("en")'>EN</button>
            <button class="btn btn-outline-light btn-sm me-3" @onclick='() => SetLanguage("uk")'>UA</button>

            @if (isAuthenticated)
            {
                <button class="btn btn-outline-light btn-sm" @onclick="Logout">Выйти</button>
            }
            else
            {
                <button class="btn btn-outline-light btn-sm me-2" @onclick='() => Nav.NavigateTo("/login")'>Войти</button>
                <button class="btn btn-outline-light btn-sm" @onclick='() => Nav.NavigateTo("/register")'>Регистрация</button>
            }
        </div>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="create-event">
                <span class="bi bi-calendar-plus-fill-nav-menu" aria-hidden="true"></span> Создать событие
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="events">
                <span class="bi bi-list-ul" aria-hidden="true"></span> Все события
            </NavLink>
        </div>
    </nav>
</div>

@implements IDisposable

@code {
    private bool collapseNavMenu = true;
    private bool isAuthenticated;
    private string? userEmail;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userEmail = user.Identity?.Name;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userEmail = user.Identity?.Name;

        await InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        isAuthenticated = false;
        userEmail = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    private async Task SetLanguage(string culture)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "blazorCulture", culture);
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }
}