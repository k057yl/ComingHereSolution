@using ComingHereClient.Pages.Events
@using ComingHereClient.Services
@using ComingHereShared.DTO.EventDtos
@inject HttpClient Http
@inject LocalizationService Loc

<h5>Рекомендуем</h5>

@if (vipEvent != null)
{
    <VipEvent Event="vipEvent" IsFading="isFading" />
}
else
{
    <img src="pic/default.png" class="vip-photo" />
}

@code {
    private EventDto? vipEvent;
    private bool isFading = false;
    private readonly TimeSpan refreshInterval = TimeSpan.FromSeconds(10);
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        Loc.LanguageChanged += OnLanguageChanged;
        await LoadVipEvent();

        timer = new Timer(async _ =>
        {
            isFading = true;
            await InvokeAsync(StateHasChanged);

            await Task.Delay(500);
            await LoadVipEvent();

            isFading = false;
            await InvokeAsync(StateHasChanged);
        }, null, refreshInterval, refreshInterval);
    }

    private async Task LoadVipEvent()
    {
        try
        {
            var culture = Loc.CurrentCulture;
            var response = await Http.GetAsync($"api/events/vip-random?culture={culture}");

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                {
                    vipEvent = null;
                }
                else
                {
                    vipEvent = await response.Content.ReadFromJsonAsync<EventDto>();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                vipEvent = null;
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Ошибка: {response.StatusCode}, {msg}");
                vipEvent = null;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка загрузки VIP-события: {ex.Message}");
            vipEvent = null;
        }
    }

    private async Task OnLanguageChanged()
    {
        await LoadVipEvent();
        StateHasChanged();
    }

    public void Dispose()
    {
        Loc.LanguageChanged -= OnLanguageChanged;
        timer?.Dispose();
    }
}