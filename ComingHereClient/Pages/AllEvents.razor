@page "/allevents"
@using ComingHereClient.Services
@using ComingHereShared.DTO
@using ComingHereShared.DTO.EventDtos
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject LocalizationService Loc

<h3 class="text-center mb-4">@Loc["AllEventsPage_Title"]</h3>

@if (categories != null && categories.Any())
{
    <div class="mb-3 text-center">
        <label>@Loc["AllEventsPage_Filter"]</label>
        <select @onchange="OnCategoryChanged" class="form-select w-auto d-inline-block ms-2">
            <option value="">@Loc["AllEventsPage_AllCategory"]</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>
    </div>
}

@if (isLoading)
{
    <p class="text-center">@Loc["AllEventsPage_Loading"].</p>
}
else if (events == null || !events.Any())
{
    <p class="text-center">@Loc["AllEventsPage_NoEvents"].</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var ev in events)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="event-title">@ev.Name</h5>
                        @if (ev.Photos?.Count > 0)
                        {
                            <img src="@ev.Photos[0].PhotoUrl" alt="Фото" class="img-container-allevent" />
                        }

                        <p class="card-text"><strong>Категория:</strong> @ev.CategoryName</p>
                        <p class="card-text description-single-line">@ev.Description</p>

                        <p class="card-text"><strong>Начало:</strong> @ev.StartTime.ToLocalTime().ToString("g")</p>
                        <p class="card-text"><strong>Окончание:</strong> @(ev.EndTime?.ToLocalTime().ToString("g") ?? "-")</p>

                        <p class="card-text"><strong>Место:</strong> @ev.Location</p>
                        <p class="card-text"><strong>Организатор:</strong> @ev.OrganizerName</p>
                        <div id="map-@ev.Id" class="map-container-allevent"></div>

                        <p class="card-text"><strong>Цена:</strong> @(ev.Price != null ? $"{ev.Price} Грн" : "-")</p>
                        <p class="card-text"><strong>Макс. участников:</strong> @(ev.MaxAttendees?.ToString() ?? "-")</p>

                        @if (ev.Phone is not null || ev.Email is not null || ev.Website is not null || ev.Telegram is not null || ev.Instagram is not null)
                        {
                            <div class="mt-2">
                                <strong>Контакты:</strong>
                                <ul class="list-unstyled mb-0 ms-2">
                                    @if (!string.IsNullOrWhiteSpace(ev.Phone))
                                    {
                                        <li>📞 @ev.Phone</li>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(ev.Email))
                                    {
                                        <li>✉️ @ev.Email</li>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(ev.Website))
                                    {
                                        <li>🌐 <a href="@ev.Website" target="_blank">@ev.Website</a></li>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(ev.Telegram))
                                    {
                                        <li>📲 Telegram: <a href="https://t.me/@(ev.Telegram.TrimStart('@'))" target="_blank">@ev.Telegram</a></li>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(ev.Instagram))
                                    {
                                        <li>📷 Instagram: <a href="https://instagram.com/@(ev.Instagram.TrimStart('@'))" target="_blank">@ev.Instagram</a></li>
                                    }
                                </ul>
                            </div>
                        }

                        <div class="mt-auto d-flex justify-content-between">
                            <button class="btn btn-sm btn-primary" @onclick="() => ViewEvent(ev.Id)">👁️</button>
                            @if (isAdmin)
                            {
                                <button class="btn btn-sm btn-secondary" @onclick="() => EditEvent(ev.Id)">✏️</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(ev.Id)">🗑️</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<EventDto>? events;
    private bool isLoading = true;
    private bool shouldRenderMaps = false;
    private bool isAdmin = false;
    private List<EventDto>? allEvents;
    private List<EventCategoryDto>? categories;
    private int? selectedCategoryId = null;

    protected override async Task OnInitializedAsync()
    {
        Loc.LanguageChanged += OnLanguageChanged;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Gala");

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        StateHasChanged();

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        try
        {
            allEvents = await client.GetFromJsonAsync<List<EventDto>>($"api/events?culture={Loc.CurrentCulture}");
            events = allEvents;

            categories = await client.GetFromJsonAsync<List<EventCategoryDto>>("api/eventcategory");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке: {ex.Message}");
            allEvents = null;
            events = null;
            categories = null;
        }

        isLoading = false;
        shouldRenderMaps = true;
        StateHasChanged();
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        var val = e.Value?.ToString();
        if (int.TryParse(val, out int id))
        {
            selectedCategoryId = id;
            events = allEvents?.Where(ev => ev.CategoryId == id).ToList();
        }
        else
        {
            selectedCategoryId = null;
            events = allEvents;
        }

        shouldRenderMaps = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderMaps && events != null)
        {
            shouldRenderMaps = false;
            await InvokeAsync(async () =>
            {
                foreach (var ev in events)
                {
                    await JS.InvokeVoidAsync("renderStaticMap", $"map-{ev.Id}", ev.Latitude, ev.Longitude);
                }
            });
        }
    }

    private async Task DeleteEvent(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Удалить событие #{id}?"))
            return;

        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var response = await client.DeleteAsync($"api/events/{id}");

            if (response.IsSuccessStatusCode)
            {
                events = events?.Where(e => e.Id != id).ToList();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Ошибка удаления: {response.StatusCode} — {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"💥 Исключение при удалении: {ex.Message}");
        }
    }

    private void EditEvent(int id)
    {
        Nav.NavigateTo($"/edit-events/{id}");
    }

    private void ViewEvent(int id)
    {
        Nav.NavigateTo($"/events/{id}");
    }

    private async Task OnLanguageChanged()
    {
        await LoadDataAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        Loc.LanguageChanged -= OnLanguageChanged;
    }
}