@page "/allevents"
@using ComingHereShared.DTO
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager Nav

<h3 class="text-center mb-4">Все события</h3>

@if (isLoading)
{
    <p class="text-center">Загрузка...</p>
}
else if (events == null || !events.Any())
{
    <p class="text-center">События не найдены.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var ev in events)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@ev.Name</h5>
                        <p class="card-text"><strong>Категория:</strong> @ev.CategoryName</p>
                        <p class="card-text">@ev.Description</p>

                        <p class="card-text"><strong>Начало:</strong> @ev.StartTime.ToLocalTime().ToString("g")</p>
                        <p class="card-text"><strong>Окончание:</strong> @(ev.EndTime?.ToLocalTime().ToString("g") ?? "-")</p>

                        <p class="card-text"><strong>Место:</strong> @ev.Location (@ev.Latitude, @ev.Longitude)</p>
                        <div id="map-@ev.Id" style="height: 200px; width: 100%;" class="mb-3"></div>

                        <p class="card-text"><strong>Цена:</strong> @(ev.Price != null ? $"{ev.Price} Грн" : "-")</p>
                        <p class="card-text"><strong>Макс. участников:</strong> @(ev.MaxAttendees?.ToString() ?? "-")</p>

                        @if (ev.Photos?.Count > 0)
                        {
                            <img src="@ev.Photos[0].PhotoUrl" alt="Фото" class="img-fluid rounded mb-2" />
                        }

                        <div class="mt-auto d-flex justify-content-between">
                            <button class="btn btn-sm btn-primary" @onclick="() => ViewEvent(ev.Id)">👁️</button>
                            <button class="btn btn-sm btn-secondary" @onclick="() => EditEvent(ev.Id)">✏️</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(ev.Id)">🗑️</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<EventDto>? events;
    private bool isLoading = true;
    private bool shouldRenderMaps = false;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        try
        {
            events = await client.GetFromJsonAsync<List<EventDto>>("api/event/all");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке событий: {ex.Message}");
            events = null;
        }

        isLoading = false;
        shouldRenderMaps = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderMaps && events != null)
        {
            foreach (var ev in events)
            {
                await JS.InvokeVoidAsync("renderStaticMap", $"map-{ev.Id}", ev.Latitude, ev.Longitude);
            }

            shouldRenderMaps = false;
        }
    }

    private async Task DeleteEvent(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Удалить событие #{id}?"))
            return;

        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var response = await client.DeleteAsync($"api/event/{id}");

            if (response.IsSuccessStatusCode)
            {
                events = events?.Where(e => e.Id != id).ToList();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Ошибка удаления: {response.StatusCode} — {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"💥 Исключение при удалении: {ex.Message}");
        }
    }

    private void EditEvent(int id)
    {
        Nav.NavigateTo($"/edit-event/{id}");
    }

    private void ViewEvent(int id)
    {
        Nav.NavigateTo($"/event/{id}");
    }
}