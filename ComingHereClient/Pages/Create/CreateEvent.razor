@page "/create-event"
@using ComingHereClient.Services
@using ComingHereShared.DTO
@using System.Text.Json;
@using ComingHereShared.DTO.EventDtos
@using ComingHereShared.DTO.OrganizerDtos
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Nav
@inject LocalizationService Loc

<h3 class="text-center mb-4">@Loc["CreateEventPage_Title"]</h3>

<div class="d-flex justify-content-center">
    <EditForm Model="newEvent" OnValidSubmit="HandleValidSubmit" style="width: 50%; min-height: 100vh;">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="p-3">
            <!-- Название -->
            <div class="mb-3">
                <label class="form-label">@Loc["CreateEventPage_EventName"] (UK)</label>
                <InputText class="form-control" @bind-Value="NameUk" />
            </div>
            <div class="mb-3">
                <label class="form-label">@Loc["CreateEventPage_EventName"] (EN)</label>
                <InputText class="form-control" @bind-Value="NameEn" />
            </div>

            <!-- Категория -->
            <div class="mb-3">
                <label class="form-label">@Loc["CreateEventPage_Category"]</label>
                <select class="form-select" @bind="newEvent.CategoryId">
                    <option value="">-- @Loc["CreateEventPage_SelectCategory"] --</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>

            <!-- Описание -->
            <div class="mb-3">
                <label class="form-label">@Loc["CreateEventPage_EventDescription"] (UK)</label>
                <InputTextArea class="form-control" @bind-Value="DescriptionUk" />
            </div>
            <div class="mb-3">
                <label class="form-label">@Loc["CreateEventPage_EventDescription"] (EN)</label>
                <InputTextArea class="form-control" @bind-Value="DescriptionEn" />
            </div>

            <!-- Флаг повторяющегося события -->
            <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input" id="isRecurringCheck" @bind="newEvent.IsRecurring" />
                <label class="form-check-label" for="isRecurringCheck">Повторяющееся событие</label>
            </div>

            @if (!newEvent.IsRecurring)
            {
                <!-- Обычные дата и время -->
                <div class="mb-3">
                    <label class="form-label">Дата и время начала</label>
                    <input type="datetime-local" class="form-control"
                           value="@BindDateTime(newEvent.StartTime)"
                           @oninput="e => newEvent.StartTime = ParseDateTime(e.Value?.ToString())" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Дата и время окончания</label>
                    <input type="datetime-local" class="form-control"
                           value="@BindDateTime(newEvent.EndTime ?? DateTime.Now)"
                           @oninput="e => newEvent.EndTime = ParseDateTime(e.Value?.ToString())" />
                </div>
            }
            else
            {
                <!-- Расписание повторений -->
                <div class="mb-3 border rounded p-3">
                    <h5>Расписание повторений</h5>
                    @if (newEvent.Schedules?.Count > 0)
                    {
                        @for (int i = 0; i < newEvent.Schedules.Count; i++)
                        {
                            var schedule = newEvent.Schedules[i];

                            <div class="mb-2 d-flex align-items-center gap-2 flex-wrap" @key="schedule">
                                <select @bind="schedule.DayOfWeek" class="form-select" style="width: 120px;">
                                    @foreach (var day in Enum.GetValues<DayOfWeek>())
                                    {
                                        <option value="@day">@day</option>
                                    }
                                </select>

                                <input type="time" class="form-control" style="width: 100px;"
                                       value="@BindTime(schedule.StartTime)"
                                       @onchange="e => schedule.StartTime = ParseTime(e.Value?.ToString())" />
                                <input type="time" class="form-control" style="width: 100px;"
                                       value="@BindTime(schedule.EndTime)"
                                       @onchange="e => schedule.EndTime = ParseTime(e.Value?.ToString())" />

                                <input type="date" class="form-control" style="width: 140px;"
                                       value="@BindDateOnly(schedule.StartDate)"
                                       @onchange="e => schedule.StartDate = ParseDateOnly(e.Value?.ToString())" />
                                <input type="date" class="form-control" style="width: 140px;"
                                       value="@BindNullableDateOnly(schedule.EndDate)"
                                       @onchange="e => schedule.EndDate = ParseNullableDateOnly(e.Value?.ToString())" />

                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveSchedule(i)">Удалить</button>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Нет расписаний. Нажми кнопку ниже, чтобы добавить первое.</p>
                    }

                    <button type="button" class="btn btn-primary btn-sm mt-2" @onclick="AddSchedule">Добавить расписание</button>
                </div>
            }

            <!-- Место -->
            <div class="mb-3">
                <label class="form-label">Место (UK)</label>
                <InputText class="form-control" @bind-Value="LocationUk" />
            </div>
            <div class="mb-3">
                <label class="form-label">Место (EN)</label>
                <InputText class="form-control" @bind-Value="LocationEn" />
            </div>

            <!-- Адрес (UK) -->
            <div class="mb-3">
                <label class="form-label">Адрес (UK)</label>
                <InputText class="form-control" @bind-Value="AddressUk" />
            </div>
            <!-- Адрес (EN) -->
            <div class="mb-3">
                <label class="form-label">Адрес (EN)</label>
                <InputText class="form-control" @bind-Value="AddressEn" />
            </div>

            <!-- Организатор -->
            <div class="mb-3">
                <label class="form-label">Организатор</label>
                <select class="form-select" @bind="newEvent.OrganizerId">
                    <option value="">-- Выбери организатора --</option>
                    @foreach (var org in organizers)
                    {
                        <option value="@org.Id">@org.Name</option>
                    }
                </select>
            </div>

            <!-- Контактная информация -->
            <div class="mb-3">
                <button type="button" class="btn btn-outline-secondary" @onclick="() => showContactInfo = !showContactInfo">
                    @(showContactInfo ? "Скрыть контакты" : "Добавить контакты")
                </button>
            </div>

            @if (showContactInfo)
            {
                <div class="border rounded p-3 mb-3">
                    <div class="mb-2">
                        <label class="form-label">Телефон</label>
                        <InputText class="form-control" @bind-Value="newEvent.Details.ContactInfo.Phone" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="newEvent.Details.ContactInfo.Email" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Сайт</label>
                        <InputText class="form-control" @bind-Value="newEvent.Details.ContactInfo.Website" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Telegram</label>
                        <InputText class="form-control" @bind-Value="newEvent.Details.ContactInfo.Telegram" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Instagram</label>
                        <InputText class="form-control" @bind-Value="newEvent.Details.ContactInfo.Instagram" />
                    </div>
                </div>
            }

            <!-- Участники -->
            <div class="mb-3">
                <label class="form-label">Участники</label>
                <select class="form-select" multiple @onchange="HandleParticipantsChanged">
                    @foreach (var p in participants)
                    {
                        <option value="@p.Id">@p.Name.Get("uk")</option>
                    }
                </select>
            </div>

            <!-- Карта -->
            <div class="mb-4 d-flex justify-content-center">
                <div id="map" style="height: 400px; width: 100%; max-width: 600px;"></div>
            </div>

            <!-- Координаты скрыты -->
            <input type="hidden" name="Latitude" value="@newEvent.Details.Latitude" />
            <input type="hidden" name="Longitude" value="@newEvent.Details.Longitude" />

            <!-- Цена и участники -->
            <div class="mb-3">
                <label class="form-label">Цена</label>
                <InputNumber class="form-control" @bind-Value="newEvent.Details.Price" />
            </div>
            <div class="mb-3">
                <label class="form-label">Макс. участников</label>
                <InputNumber class="form-control" @bind-Value="newEvent.Details.MaxAttendees" />
            </div>
            <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input" id="vipCheck" @bind="newEvent.IsVip" />
                <label class="form-check-label" for="vipCheck">VIP событие</label>
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary px-4">Создать</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private EventCreateDto newEvent = new EventCreateDto
    {
        StartTime = DateTime.Now,
        Details = new EventDetailsDto
        {
            Latitude = 48.9226,
            Longitude = 24.7111,
            ContactInfo = new EventContactInfoDto()
        },
        ParticipantIds = new List<int>(),
        Schedules = new List<EventScheduleDto>()
    };

    private string? authToken;
    private string? userName;
    private bool showContactInfo = false;

    private List<EventCategoryDto> categories = new();
    private List<EventOrganizerDto> organizers = new();
    private List<EventParticipantDto> participants = new();

    protected override async Task OnInitializedAsync()
    {
        authToken = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(authToken))
            userName = ExtractUserNameFromJwt(authToken) ?? "неизвестен";
        else
            userName = "аноним";

        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");

            categories = await client.GetFromJsonAsync<List<EventCategoryDto>>("api/eventcategory") ?? new();
            organizers = await client.GetFromJsonAsync<List<EventOrganizerDto>>("api/eventorganizers") ?? new();
            participants = await client.GetFromJsonAsync<List<EventParticipantDto>>("api/eventparticipants") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки данных: {ex.Message}");
        }
    }

    private void HandleParticipantsChanged(ChangeEventArgs e)
    {
        newEvent.ParticipantIds.Clear();

        if (e.Value is not null and string raw)
        {
            var selectedIds = raw.Split(",", StringSplitOptions.RemoveEmptyEntries)
                                 .Select(x => int.TryParse(x, out var id) ? id : (int?)null)
                                 .Where(x => x.HasValue)
                                 .Select(x => x!.Value)
                                 .ToList();

            newEvent.ParticipantIds.AddRange(selectedIds);
        }
    }

    private DotNetObjectReference<CreateEvent>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && newEvent.Details != null)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("startMap", newEvent.Details.Latitude, newEvent.Details.Longitude, dotNetRef);
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

    [JSInvokable]
    public void UpdateCoordinates(double lat, double lng)
    {
        newEvent.Details.Latitude = lat;
        newEvent.Details.Longitude = lng;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        // Проверяем обязательные поля локализованных строк
        if (string.IsNullOrWhiteSpace(NameUk) || string.IsNullOrWhiteSpace(NameEn))
        {
            Console.WriteLine("⚠️ Укажи название события на обоих языках");
            return;
        }

        if (string.IsNullOrWhiteSpace(DescriptionUk) || string.IsNullOrWhiteSpace(DescriptionEn))
        {
            Console.WriteLine("⚠️ Укажи описание события на обоих языках");
            return;
        }

        if (string.IsNullOrWhiteSpace(LocationUk) || string.IsNullOrWhiteSpace(LocationEn))
        {
            Console.WriteLine("⚠️ Укажи место события на обоих языках");
            return;
        }

        // Проверяем обязательные int-поля
        if (newEvent.CategoryId == 0)
        {
            Console.WriteLine("⚠️ Выбери категорию события");
            return;
        }

        if (newEvent.OrganizerId == 0)
        {
            Console.WriteLine("⚠️ Выбери организатора события");
            return;
        }

        // Проверка токена
        if (string.IsNullOrEmpty(authToken))
        {
            Console.WriteLine("⚠️ Токен не найден в localStorage.");
            return;
        }

        // Отправка на сервер
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        client.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

        Console.WriteLine("📤 Отправляем DTO:");
        Console.WriteLine(JsonSerializer.Serialize(newEvent));

        var response = await client.PostAsJsonAsync("api/events", newEvent);
        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<Dictionary<string, int>>();
            if (created != null && created.TryGetValue("id", out var eventId))
            {
                Nav.NavigateTo($"/upload-photo/{eventId}");
            }
            else
            {
                Console.WriteLine("⚠️ Не удалось получить ID события из ответа.");
                Nav.NavigateTo("/");
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"❌ Ошибка создания события: {response.StatusCode} — {error}");
        }
    }

    private string? ExtractUserNameFromJwt(string jwt)
    {
        var parts = jwt.Split('.');
        if (parts.Length < 2) return null;

        var payloadJson = System.Text.Encoding.UTF8.GetString(PadBase64(parts[1]));
        using var doc = JsonDocument.Parse(payloadJson);
        var root = doc.RootElement;

        foreach (var prop in root.EnumerateObject())
        {
            var key = prop.Name.ToLowerInvariant();
            if (key.EndsWith("/name") || key == "name" || key == "email" || key == "sub")
            {
                if (prop.Value.ValueKind == JsonValueKind.String)
                    return prop.Value.GetString();
            }
        }
        return null;
    }

    private byte[] PadBase64(string base64)
    {
        base64 = base64.Replace('-', '+').Replace('_', '/');
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }

    private string BindDateTime(DateTime dt) => dt.ToString("yyyy-MM-ddTHH:mm");

    private DateTime ParseDateTime(string? s)
    {
        if (DateTime.TryParse(s, out var dt))
            return dt;
        return DateTime.Now;
    }

    private string BindTime(TimeOnly time) => time.ToString("HH:mm");

    private TimeOnly ParseTime(string? s)
    {
        if (TimeOnly.TryParse(s, out var time))
            return time;
        return TimeOnly.MinValue;
    }

    private string BindDateOnly(DateOnly date) => date.ToString("yyyy-MM-dd");

    private DateOnly ParseDateOnly(string? s)
    {
        if (DateOnly.TryParse(s, out var date))
            return date;
        return DateOnly.MinValue;
    }

    private string BindNullableDateOnly(DateOnly? date)
    {
        if (date.HasValue)
            return date.Value.ToString("yyyy-MM-dd");
        return string.Empty;
    }

    private DateOnly? ParseNullableDateOnly(string? s)
    {
        if (string.IsNullOrEmpty(s))
            return null;
        if (DateOnly.TryParse(s, out var date))
            return date;
        return null;
    }

    private void AddSchedule()
    {
        newEvent.Schedules.Add(new EventScheduleDto
        {
            DayOfWeek = DayOfWeek.Monday,
            StartTime = TimeOnly.MinValue,
            EndTime = TimeOnly.MinValue,
            StartDate = DateOnly.FromDateTime(DateTime.Today),
            EndDate = null
        });
    }

    private void RemoveSchedule(int index)
    {
        if (index >= 0 && index < newEvent.Schedules.Count)
        {
            newEvent.Schedules.RemoveAt(index);
        }
        else
        {
            Console.WriteLine($"❗ Попытка удалить расписание с невалидным индексом {index}");
        }
    }

    private string NameUk
    {
        get => newEvent.Name.Get("uk");
        set => newEvent.Name.Set("uk", value);
    }

    private string NameEn
    {
        get => newEvent.Name.Get("en");
        set => newEvent.Name.Set("en", value);
    }

    private string DescriptionUk
    {
        get => newEvent.Description.Get("uk");
        set => newEvent.Description.Set("uk", value);
    }

    private string DescriptionEn
    {
        get => newEvent.Description.Get("en");
        set => newEvent.Description.Set("en", value);
    }

    private string LocationUk
    {
        get => newEvent.Location.Get("uk");
        set => newEvent.Location.Set("uk", value);
    }

    private string LocationEn
    {
        get => newEvent.Location.Get("en");
        set => newEvent.Location.Set("en", value);
    }

    private string AddressUk
    {
        get => newEvent.Details.Address.Get("uk");
        set => newEvent.Details.Address.Set("uk", value);
    }

    private string AddressEn
    {
        get => newEvent.Details.Address.Get("en");
        set => newEvent.Details.Address.Set("en", value);
    }
}