@page "/create-event"
@using ComingHereShared.DTO
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Nav
@using System.Text.Json;

<h3>Создать событие</h3>

<EditForm Model="newEvent" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Название</label>
        <InputText id="name" class="form-control" @bind-Value="newEvent.Name" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Описание</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newEvent.Description" />
    </div>
    <div class="mb-3">
        <label for="startTime" class="form-label">Дата и время начала</label>
        <InputDate id="startTime" class="form-control" @bind-Value="newEvent.StartTime" />
    </div>
    <div class="mb-3">
        <label for="endTime" class="form-label">Дата и время окончания</label>
        <InputDate id="endTime" class="form-control" @bind-Value="newEvent.EndTime" />
    </div>
    <div class="mb-3">
        <label for="location" class="form-label">Место</label>
        <InputText id="location" class="form-control" @bind-Value="newEvent.Location" />
    </div>

    <div id="map" style="height: 400px; margin-bottom: 15px;"></div>

    <div class="mb-3">
        <label for="latitude" class="form-label">Широта</label>
        <InputNumber id="latitude" class="form-control" @bind-Value="newEvent.Latitude" />
    </div>
    <div class="mb-3">
        <label for="longitude" class="form-label">Долгота</label>
        <InputNumber id="longitude" class="form-control" @bind-Value="newEvent.Longitude" />
    </div>
    <div class="mb-3">
        <label for="price" class="form-label">Цена</label>
        <InputNumber id="price" class="form-control" @bind-Value="newEvent.Price" />
    </div>
    <div class="mb-3">
        <label for="maxAttendees" class="form-label">Макс. участников</label>
        <InputNumber id="maxAttendees" class="form-control" @bind-Value="newEvent.MaxAttendees" />
    </div>

    <button type="submit" class="btn btn-primary">Создать</button>
</EditForm>

@code {
    private EventCreateDto newEvent = new EventCreateDto
    {
        StartTime = DateTime.Now,
        Latitude = 55.75,   // Москва дефолт
        Longitude = 37.61
    };

    private string? authToken;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        authToken = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(authToken))
            userName = ExtractUserNameFromJwt(authToken) ?? "неизвестен";
        else
            userName = "аноним";
    }

    private DotNetObjectReference<CreateEvent>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("startMap", newEvent.Latitude, newEvent.Longitude, dotNetRef);
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

    [JSInvokable]
    public void UpdateCoordinates(double lat, double lng)
    {
        newEvent.Latitude = lat;
        newEvent.Longitude = lng;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(authToken))
        {
            Console.WriteLine("⚠️ Токен не найден в localStorage.");
            return;
        }

        Console.WriteLine("📤 Отправляем DTO:");
        Console.WriteLine(JsonSerializer.Serialize(newEvent));

        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);
        var response = await client.PostAsJsonAsync("api/event", newEvent);

        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<Dictionary<string, int>>();
            if (created != null && created.TryGetValue("id", out var eventId))
            {
                Nav.NavigateTo($"/upload-photo/{eventId}");
            }
            else
            {
                Console.WriteLine("⚠️ Не удалось получить ID события из ответа.");
                Nav.NavigateTo("/");
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"❌ Ошибка создания события: {response.StatusCode} — {error}");
        }
    }

    private string? ExtractUserNameFromJwt(string jwt)
    {
        var parts = jwt.Split('.');
        if (parts.Length < 2) return null;

        var payloadJson = System.Text.Encoding.UTF8.GetString(PadBase64(parts[1]));
        using var doc = JsonDocument.Parse(payloadJson);
        var root = doc.RootElement;

        foreach (var prop in root.EnumerateObject())
        {
            var key = prop.Name.ToLowerInvariant();
            if (key.EndsWith("/name") || key == "name" || key == "email" || key == "sub")
            {
                if (prop.Value.ValueKind == JsonValueKind.String)
                    return prop.Value.GetString();
            }
        }
        return null;
    }

    private byte[] PadBase64(string base64)
    {
        base64 = base64.Replace('-', '+').Replace('_', '/');
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }
}