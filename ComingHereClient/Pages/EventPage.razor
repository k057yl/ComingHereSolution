@page "/events"
@using ComingHereShared.DTO
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager Nav

<h3>Все события</h3>

@if (isLoading)
{
    <p>Загрузка...</p>
}
else if (events == null || !events.Any())
{
    <p>События не найдены.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Описание</th>
                <th>Начало</th>
                <th>Окончание</th>
                <th>Место (с картой)</th>
                <th>Цена</th>
                <th>Макс. участников</th>
                <th>Фото</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <td>@ev.Name</td>
                    <td>@ev.Description</td>
                    <td>@ev.StartTime.ToLocalTime().ToString("g")</td>
                    <td>@(ev.EndTime != null ? ev.EndTime.Value.ToLocalTime().ToString("g") : "-")</td>
                    <td>
                        <div>@ev.Location (@ev.Latitude, @ev.Longitude)</div>
                        <div id="map-@ev.Id" style="height: 200px; width: 200px;"></div>
                    </td>
                    <td>@(ev.Price != null ? $"{ev.Price} Грн" : "-")</td>
                    <td>@(ev.MaxAttendees?.ToString() ?? "-")</td>
                    <td>
                        @if (ev.Photos?.Count > 0)
                        {
                            <img src="@ev.Photos[0].PhotoUrl" alt="Фото" width="100" />
                        }
                        else
                        {
                            <span>—</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => EditEvent(ev.Id)">✏️</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(ev.Id)">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EventDto>? events;
    private bool isLoading = true;
    private bool shouldRenderMaps = false;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        try
        {
            events = await client.GetFromJsonAsync<List<EventDto>>("api/event");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке событий: {ex.Message}");
            events = null;
        }

        isLoading = false;
        shouldRenderMaps = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderMaps && events != null)
        {
            foreach (var ev in events)
            {
                await JS.InvokeVoidAsync("renderStaticMap", $"map-{ev.Id}", ev.Latitude, ev.Longitude);
            }

            shouldRenderMaps = false;
        }
    }

    private async Task DeleteEvent(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Удалить событие #{id}?"))
            return;

        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var response = await client.DeleteAsync($"api/event/{id}");

            if (response.IsSuccessStatusCode)
            {
                events = events?.Where(e => e.Id != id).ToList();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Ошибка удаления: {response.StatusCode} — {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"💥 Исключение при удалении: {ex.Message}");
        }
    }

    private void EditEvent(int id)
    {
        Nav.NavigateTo($"/edit-event/{id}");
    }
}