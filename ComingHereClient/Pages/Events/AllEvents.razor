@page "/events/allevents"
@using ComingHereClient.Services
@using ComingHereShared.DTO
@using ComingHereShared.DTO.EventDtos
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject LocalizationService Loc

<h3 class="text-center mb-4">@Loc["AllEventsPage_Title"]</h3>

@if (categories != null && categories.Any())
{
    <EventFilters Categories="categories"
                  SelectedCategoryId="@selectedCategoryId" SelectedCategoryIdChanged="OnSelectedCategoryChanged"
                  StartDateFilter="@startDateFilter" StartDateFilterChanged="OnStartDateFilterChanged"
                  EndDateFilter="@endDateFilter" EndDateFilterChanged="OnEndDateFilterChanged"
                  SortOrder="@sortOrder" SortOrderChanged="OnSortOrderChanged"
                  SelectedFilter="@selectedFilter" SelectedFilterChanged="OnSelectedFilterChanged"
                  OnFilterChanged="ApplyFilters" />
}

@if (isLoading)
{
    <p class="text-center">@Loc["AllEventsPage_Loading"]</p>
}
else if (events == null || !events.Any())
{
    <p class="text-center">@Loc["AllEventsPage_NoEvents"]</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var ev in events)
        {
            <div class="col">
                <EventCard Event="ev" IsAdmin="isAdmin"
                           OnView="@ViewEvent"
                           OnDelete="@DeleteEvent" />
            </div>
        }
    </div>
}

@code {
    private List<EventDto>? events;
    private List<EventDto>? allEvents;
    private List<EventCategoryDto>? categories;
    private bool isLoading = true;
    private bool isAdmin = false;

    private int? selectedCategoryId = null;
    private DateTime? startDateFilter = null;
    private DateTime? endDateFilter = null;
    private string sortOrder = "asc";
    private string selectedFilter = "upcoming";

    protected override async Task OnInitializedAsync()
    {
        Loc.LanguageChanged += OnLanguageChanged;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Gala");

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            allEvents = await client.GetFromJsonAsync<List<EventDto>>($"api/events?culture={Loc.CurrentCulture}");
            categories = await client.GetFromJsonAsync<List<EventCategoryDto>>("api/eventcategory");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке: {ex.Message}");
            allEvents = null;
            events = null;
            categories = null;
        }

        isLoading = false;
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        if (allEvents == null)
        {
            events = null;
            return;
        }

        var query = allEvents.AsEnumerable();

        query = selectedFilter switch
        {
            "past" => query.Where(ev => ev.EndTime.HasValue && ev.EndTime.Value.ToUniversalTime() < DateTime.UtcNow),
            "upcoming" => query.Where(ev => !ev.EndTime.HasValue || ev.EndTime.Value.ToUniversalTime() >= DateTime.UtcNow),
            _ => query
        };

        if (selectedCategoryId.HasValue)
            query = query.Where(ev => ev.CategoryId == selectedCategoryId);

        if (startDateFilter.HasValue)
            query = query.Where(ev => ev.StartTime.Date >= startDateFilter.Value.Date);

        if (endDateFilter.HasValue)
            query = query.Where(ev => ev.StartTime.Date <= endDateFilter.Value.Date);

        events = sortOrder switch
        {
            "asc" => query.OrderBy(ev => ev.StartTime).ToList(),
            "desc" => query.OrderByDescending(ev => ev.StartTime).ToList(),
            _ => query.ToList()
        };

        StateHasChanged();
    }

    private Task OnSelectedCategoryChanged(int? val)
    {
        selectedCategoryId = val;
        return Task.CompletedTask;
    }

    private Task OnStartDateFilterChanged(DateTime? val)
    {
        startDateFilter = val;
        return Task.CompletedTask;
    }

    private Task OnEndDateFilterChanged(DateTime? val)
    {
        endDateFilter = val;
        return Task.CompletedTask;
    }

    private Task OnSortOrderChanged(string val)
    {
        sortOrder = val;
        return Task.CompletedTask;
    }

    private Task OnSelectedFilterChanged(string val)
    {
        selectedFilter = val;
        return Task.CompletedTask;
    }

    private async Task OnLanguageChanged()
    {
        await LoadDataAsync();
        StateHasChanged();
    }

    private void ViewEvent(int id)
    {
        Nav.NavigateTo($"/events/{id}");
    }

    private async Task DeleteEvent(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Удалить событие #{id}?"))
            return;

        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var response = await client.DeleteAsync($"api/events/{id}");

            if (response.IsSuccessStatusCode)
            {
                events = events?.Where(e => e.Id != id).ToList();
                StateHasChanged();
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Ошибка удаления: {response.StatusCode} - {content}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Исключение при удалении: {ex.Message}");
        }
    }

    public void Dispose() => Loc.LanguageChanged -= OnLanguageChanged;
}