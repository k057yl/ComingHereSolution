@page "/events/{id:int}"
@using ComingHereClient.Services
@using ComingHereShared.DTO.EventDtos
@using ComingHereShared.Entities
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject LocalizationService Loc

<h3 class="text-center mb-4">Просмотр события</h3>

<button class="btn btn-secondary mb-3" @onclick="GoBackToHome">← @Loc["Event_Button_GoHome"]</button>
<button class="btn btn-secondary mb-3" @onclick="GoBackToAllEvents">← @Loc["Event_Button_GoToEvents"]</button>

@if (isLoading)
{
    <p class="text-center">@Loc["Loading"]</p>
}
else if (ev == null)
{
    <p class="text-center">"@Loc["Event_NotFound"]"</p>
}
else
{
    <div class="container">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">@ev.Name</h4>
                <p class="card-text"><strong>Категория:</strong> @ev.CategoryName</p>
                <p class="card-text">@ev.Description</p>
                <p class="card-text"><strong>Начало:</strong> @ev.StartTime.ToLocalTime().ToString("g")</p>
                <p class="card-text"><strong>Окончание:</strong> @(ev.EndTime?.ToLocalTime().ToString("g") ?? "-")</p>
                <p class="card-text"><strong>Место:</strong> @ev.Location (@ev.Latitude, @ev.Longitude)</p>
                <div id="map-@ev.Id" style="height: 400px; width: 100%;" class="mb-3"></div>
                <p class="card-text"><strong>Цена:</strong> @(ev.Price != null ? $"{ev.Price} Грн" : "-")</p>
                <p class="card-text"><strong>Макс. участников:</strong> @(ev.MaxAttendees?.ToString() ?? "-")</p>

                @if (ev.Photos?.Count > 0)
                {
                    <img src="@ev.Photos[0].PhotoUrl" alt="Фото" class="img-fluid rounded mb-2" />
                }
            </div>
        </div>

        @* Форма отзыва *@
        @if (!reviewSuccess)
        {
            <div class="card mt-4">
                <div class="card-header">Оставить отзыв</div>
                <div class="card-body">

                    @if (!CanSubmitReview)
                    {
                        <div class="alert alert-warning">
                            Обратите внимание: комментировать событие можно только после его окончания.
                        </div>
                    }

                    @if (submitError != null)
                    {
                        <div class="alert alert-danger">@submitError</div>
                    }

                    <div class="mb-3">
                        <label for="rating" class="form-label">Рейтинг (1-5):</label>
                        <input type="number" id="rating" class="form-control" min="1" max="5" @bind="reviewInput.Rating" />
                    </div>

                    <div class="mb-3">
                        <label for="comment" class="form-label">Комментарий:</label>
                        <textarea id="comment" class="form-control" rows="3" @bind="reviewInput.Comment"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="photourl" class="form-label">Ссылка на фото события (если есть):</label>
                        <input type="url" id="photourl" class="form-control" @bind="reviewInput.PhotoUrl" />
                    </div>

                    <button class="btn btn-primary"
                            @onclick="SubmitReview"
                            disabled="@(!CanSubmitReview || isSubmitting)">
                        @(isSubmitting ? "Отправка..." : "Отправить отзыв")
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-success mt-4">Спасибо за отзыв!</div>
        }

        @* Список отзывов с ответами (каскад) *@
        @if (ev.Reviews != null && ev.Reviews.Count > 0)
        {
            <div class="card mt-4">
                <div class="card-header">Отзывы (@ev.Reviews.Count)</div>
                <div class="card-body review-container">
                    @foreach (var review in reviews.Where(r => r.ParentReviewId == null))
                    {
                        <ReviewWithReplies Review="review"
                                           Replies="review.Replies"
                                           OnReply="HandleReply" />
                    }
                </div>
            </div>
        }
        else
        {
            <p class="mt-4 text-muted">Отзывов пока нет.</p>
        }
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private EventDto? ev;
    private bool isLoading = true;
    private bool shouldRenderMap = false;

    private EventReviewInput reviewInput = new();
    private bool isSubmitting = false;
    private string? submitError;
    private bool reviewSuccess = false;

    private List<EventReviewDtoWithReplies> reviews = new();

    private bool CanSubmitReview =>
        ev != null && (ev.IsRecurring || (ev.EndTime != null && ev.EndTime <= DateTime.UtcNow));

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        try
        {
            ev = await client.GetFromJsonAsync<EventDto>($"api/events/{id}");
            reviews = await client.GetFromJsonAsync<List<EventReviewDtoWithReplies>>($"api/eventreview/{id}");

            if (ev != null)
                ev.Reviews = reviews.Cast<EventReviewDto>().ToList();

            reviewSuccess = false; // сброс после перехода между событиями
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке события: {ex.Message}");
            ev = null;
        }

        isLoading = false;
        shouldRenderMap = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderMap && ev != null)
        {
            await JS.InvokeVoidAsync("renderStaticMap", $"map-{ev.Id}", ev.Latitude, ev.Longitude);
            shouldRenderMap = false;
        }
    }

    private void GoBackToAllEvents() => Nav.NavigateTo("/events/allevents");
    private void GoBackToHome() => Nav.NavigateTo("/");

    private async Task SubmitReview()
    {
        submitError = null;
        reviewSuccess = false;

        if (!CanSubmitReview)
        {
            submitError = "Нельзя отправлять отзыв до завершения события.";
            return;
        }

        if (reviewInput.Rating < 1 || reviewInput.Rating > 5)
        {
            submitError = "Рейтинг должен быть от 1 до 5.";
            return;
        }

        isSubmitting = true;

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        try
        {
            var dto = new EventReviewCreateDto
            {
                EventId = id,
                Rating = reviewInput.Rating,
                Comment = reviewInput.Comment,
                PhotoUrl = reviewInput.PhotoUrl,
                ParentReviewId = null
            };

            var response = await client.PostAsJsonAsync("api/eventreview", dto);

            if (response.IsSuccessStatusCode)
            {
                reviewSuccess = true;
                reviewInput = new EventReviewInput();
                reviews = await client.GetFromJsonAsync<List<EventReviewDtoWithReplies>>($"api/eventreview/{id}");
                if (ev != null)
                    ev.Reviews = reviews.Cast<EventReviewDto>().ToList();
            }
            else
            {
                reviewSuccess = false;
                var msg = await response.Content.ReadAsStringAsync();
                submitError = $"Ошибка: {msg}";
            }
        }
        catch (Exception ex)
        {
            submitError = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleReply((int parentId, string replyText) data)
    {
        var (parentReviewId, replyText) = data;

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        var dto = new EventReviewCreateDto
        {
            EventId = id,
            Rating = 0,
            Comment = replyText,
            ParentReviewId = parentReviewId
        };

        var response = await client.PostAsJsonAsync("api/eventreview", dto);

        if (response.IsSuccessStatusCode)
        {
            reviews = await client.GetFromJsonAsync<List<EventReviewDtoWithReplies>>($"api/eventreview/{id}");
            if (ev != null)
                ev.Reviews = reviews.Cast<EventReviewDto>().ToList();
            StateHasChanged();
        }
    }
}