@page "/"
@using ComingHereClient.Services
@using ComingHereShared.Constants
@using ComingHereShared.DTO
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject LocalizationService Loc

<div class="main-container">
    <h1>@Loc["Hello"]</h1>

    <p>
        @Loc["WelcomeMessage_Part1"]
        @Loc["WelcomeMessage_Part2"]
        @Loc["WelcomeMessage_Part3"]
        @Loc["WelcomeMessage_Part4"]
        @Loc["WelcomeMessage_Part5"]
    </p>

    @if (isLoading)
    {
        <p class="text-center">Loading...</p>
    }
    else
    {
        <div class="map-container">
            <div id="all-events-map" style="height: 500px; width: 100%;"></div>
        </div>
    }
</div>

@code {
    private List<EventDto>? activeEvents;
    private bool isLoading = true;
    private bool shouldRenderMap = false;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        try
        {
            activeEvents = await client.GetFromJsonAsync<List<EventDto>>(ApiRoutes.Event.Active);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке активных событий: {ex.Message}");
            activeEvents = null;
        }

        isLoading = false;
        shouldRenderMap = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderMap && activeEvents != null && activeEvents.Any())
        {
            shouldRenderMap = false;
            await JS.InvokeVoidAsync("renderEventMarkers", "all-events-map", activeEvents);
        }
    }
}