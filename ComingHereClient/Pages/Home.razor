@page "/"
@using System.Security.Claims
@using ComingHereClient.Services
@using ComingHereShared.Constants
@using ComingHereShared.DTO
@using ComingHereShared.DTO.EventDtos
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject LocalizationService Loc

<div class="main-wrapper">
    <div class="main-container">
        <h1>@Loc["HomePage_Hello"]</h1>

        <p>
            @Loc["HomePage_WelcomeMessage_Part1"]
            @Loc["HomePage_WelcomeMessage_Part2"]
            @Loc["HomePage_WelcomeMessage_Part3"]
            @Loc["HomePage_WelcomeMessage_Part4"]
            @Loc["HomePage_WelcomeMessage_Part5"]
        </p>

        <div class="map-container">
            <div class="map-legend">
                <div><img src="pic/marker-green.png" class="legend-marker" /> @Loc["HomePage_Map_Today"]</div>
                <div><img src="pic/marker-yellow.png" class="legend-marker" /> @Loc["HomePage_Map_ThisWeek"]</div>
                <div><img src="pic/marker-blue.png" class="legend-marker" /> @Loc["HomePage_Map_Later"]</div>
            </div>
            <div id="all-events-map"></div>
        </div>
    </div>
</div>

@code {
    private ClaimsPrincipal user = new ClaimsPrincipal(new ClaimsIdentity());
    private string? token;
    private bool isLoading = true;
    private List<EventDto>? activeEvents;
    private bool shouldRenderMap = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        try
        {
            activeEvents = await client.GetFromJsonAsync<List<EventDto>>(ApiRoutes.Event.Active);
            Console.WriteLine(string.Join(", ", activeEvents.Select(e => $"{e.Name}: {e.StartTime}")));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке активных событий: {ex.Message}");
            activeEvents = null;
        }

        isLoading = false;
        shouldRenderMap = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderMap && activeEvents != null && activeEvents.Any())
        {
            shouldRenderMap = false;
            await JS.InvokeVoidAsync("renderEventMarkers", "all-events-map", activeEvents);
        }
    }

    private string GetClaimValue(string claimType)
    {
        return user.Claims.FirstOrDefault(c => c.Type == claimType)?.Value ?? "";
    }

    private IEnumerable<string> GetClaims(string claimType)
    {
        return user.Claims.Where(c => c.Type == claimType).Select(c => c.Value);
    }
}